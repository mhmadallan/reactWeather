{"version":3,"sources":["dispatcher.js","actions/AppAction.js","stores/DataStore.js","comonents/ButtonClass.js","comonents/DataList.js","App.js","serviceWorker.js","index.js"],"names":["Dispatcher","RECEIVE_DATA","DATA","city","a","fetch","then","d","json","data","list","map","item","index","place","push","console","log","dispatcher","dispatch","type","value","dataStore","props","this","result","action","AppAction","emit","EventEmitter","register","handelActions","bind","ButtonClass","onButtonClick","styles","margin","width","height","class","style","onClick","React","Component","DataList","updateBackgroundColor","DataStore","getData","setState","loading","state","on","removeListener","textStyles","fontSize","textAlign","alignSelf","key","backgroundColor","unit","time","App","visible","className","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.51aabdff.chunk.js","sourcesContent":["import {Dispatcher} from \"flux\";\r\n\r\nexport default new Dispatcher;","/*\r\n * @Author: Muhammad.Allak  \r\n* @Date: 2019-11-13 23:33:07  \r\n * @Last Modified by: Muhammad_Allak\r\n * @Last Modified time: 2019-11-13 23:35:02\r\n*/\r\nimport dispatcher from \"../dispatcher\";\r\n\r\nexport const RECEIVE_DATA = {\r\n  DATA : \"AppAction.getCity\"\r\n}\r\nexport async function getCity(city){\r\n  \r\n          let data = await fetch(\"http://localhost:8080/data\").then(d => d.json());\r\n          const list = [];\r\n          data.map((item, index) => {\r\n            if (item.place === city){\r\n           \r\n               list.push(item);\r\n            }\r\n          });\r\n          \r\n          console.log(\"yah!\",list);\r\n          dispatcher.dispatch({type : RECEIVE_DATA, value : list});\r\n  }\r\n  \r\n  \r\n\r\n  ","/*\r\n * @Author: Muhammad.Allak  \r\n* @Date: 2019-11-13 23:33:07  \r\n * @Last Modified by: Muhammad_Allak\r\n * @Last Modified time: 2019-11-13 23:34:45\r\n*/\r\nimport {EventEmitter} from \"events\";\r\nimport dispatcher from \"../dispatcher\";\r\nimport * as AppAction from \"../actions/AppAction\";\r\n// this store class is to save data or to fetch data from a url\r\nclass DataStore extends EventEmitter{\r\n\r\n  \r\n  constructor(props){\r\n    super(props);\r\n    this.data = fetch(\"http://localhost:8080/data\").then(d => d.json());\r\n  }\r\n\r\n  async boo(){\r\n    var result = await this.data;\r\n    return result;\r\n  }\r\n  getAll(){\r\n    \r\n    return this.data;\r\n  }\r\n  \r\n  handelActions(action){\r\n    switch(action.type) {\r\n      case AppAction.RECEIVE_DATA:{\r\n        this.data = action.value;\r\n        this.emit(\"storeUpdated\");\r\n        break;\r\n      }\r\n      default: {\r\n      }\r\n    }\r\n      \r\n  }\r\n  \r\n  \r\n  \r\n    // But the best part is, we can just keep awaiting different stuff, without ugly .then()s\r\n    //var somethingElse = await getSomethingElse()\r\n    //var moreThings = await getMoreThings()\r\n  \r\n  async getData() {\r\n    var result = await this.data;\r\n    console.log(\"Done!\",result);\r\n    return result;\r\n}\r\n\r\n}\r\n\r\n\r\nconst dataStore = new DataStore;\r\n\r\ndispatcher.register(dataStore.handelActions.bind(dataStore));\r\nexport default dataStore;","/*\r\n * @Author: Muhammad.Allak  \r\n* @Date: 2019-11-13 23:33:07  \r\n * @Last Modified by: Muhammad_Allak\r\n * @Last Modified time: 2019-11-13 23:34:20\r\n*/\r\nimport React from \"react\";\r\nimport * as AppAction from \"../actions/AppAction\";\r\nimport DataStore from \"../stores/DataStore\";\r\n\r\nexport default class ButtonClass extends React.Component {\r\n\r\n    \r\n\r\nonButtonClick = (city) => {\r\n    AppAction.getCity(city)\r\n};\r\n\r\nrender() {\r\n    \r\n        let styles = {\r\n          margin: '20px',\r\n          width: '150px',\r\n          height: '50px',\r\n         // backgroundColor: 'yellow',\r\n    \r\n  } \r\n    \r\n    return (\r\n        \r\n            <div class=\"container\">\r\n  <div class=\"row\">\r\n    <div class=\"col-md-2\">\r\n    \r\n    </div>\r\n    <div class=\"col-md-8\">\r\n    <button style = {styles} class=\"btn btn-primary\" onClick={() => this.onButtonClick(\"Aarhus\")}>Aarhus</button>\r\n            <button style = {styles} class=\"btn btn-danger\" onClick={() => this.onButtonClick(\"Horsens\")}>Horsens</button>\r\n            <button style = {styles} class=\"btn btn-success\" onClick={() => this.onButtonClick(\"Copenhagen\")}>Copenhagen</button>\r\n            </div>    \r\n    <div class=\"col-md-2\">\r\n    \r\n   \r\n    </div>\r\n  </div>\r\n</div>\r\n           \r\n      \r\n\r\n    );\r\n}\r\n\r\n}","/*\r\n * @Author: Muhammad.Allak  \r\n* @Date: 2019-11-13 23:33:07  \r\n * @Last Modified by: Muhammad_Allak\r\n * @Last Modified time: 2019-11-13 23:34:29\r\n*/\r\nimport React from \"react\";\r\nimport DataStore from \"../stores/DataStore\";\r\n\r\nexport default class DataList extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            data: [],\r\n            loading: true,\r\n         \r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        DataStore.on(\"storeUpdated\", this.updateBackgroundColor);\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        DataStore.removeListener(\"storeUpdated\", this.updateBackgroundColor);\r\n    }\r\n    \r\n    updateBackgroundColor = async() => {\r\n        const data = await DataStore.getData();\r\n       this.setState({ data: data, loading: false });\r\n        \r\n    }\r\n       \r\n    render() {\r\n        let textStyles = {\r\n            fontSize:'20px',\r\n            textAlign: 'left', alignSelf: 'stretch',\r\n            \r\n        }\r\n      \r\n        const list = this.state.data.map((item, index) => {\r\n            \r\n            return (\r\n                <div class=\"row\">\r\n                <div class=\"col-md-4\"></div>\r\n                <li key={index} class=\"list-group-item col-md-4\">\r\n                  \r\n                  <ul class=\"list-group list-group-flush\" style = {textStyles}>\r\n                    <li style={{backgroundColor:'black'}}></li> \r\n                    <li class=\"list-group-item\">Type :  {item.type}</li>\r\n                    <li class=\"list-group-item\">Unit :  {item.unit}</li>\r\n                   \r\n                    <li class=\"list-group-item\">Value :  {item.value}</li>\r\n                    <li class=\"list-group-item\">Time :  {item.time}</li>\r\n                            \r\n                    \r\n                  </ul>\r\n                  \r\n                </li>\r\n                <div class=\"col-md-4\"></div>\r\n                </div>\r\n            );\r\n    \r\n        });\r\n        return (\r\n              <div>\r\n                   \r\n          \r\n                         <ul class=\"list-group list-group-flush\">\r\n                                {list}\r\n                         </ul>\r\n                   \r\n                   \r\n    \r\n                    \r\n             </div>\r\n        );\r\n    }\r\n}","/*\n * @Author: Muhammad.Allak  \n* @Date: 2019-11-13 23:33:07  \n * @Last Modified by: Muhammad_Allak\n * @Last Modified time: 2019-11-13 23:34:12\n*/\nimport React, { Component } from \"react\";\nimport \"./App.css\";\nimport ButtonClass from \"./comonents/ButtonClass\"\nimport DataList from \"./comonents/DataList\"\n\nclass App extends Component {\n  \n  \n  constructor(props) {\n    super(props);\n    this.state = {visible: true};\n\n    // This binding is necessary to make `this` work in the callback\n    //this.handleClick = this.handleClick.bind(this);\n  }\n  // <Btn />\n  render() {\n    return (\n      <div className=\"App\">\n        <ButtonClass />\n        <DataList/>\n       \n      </div>\n      \n    );\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}